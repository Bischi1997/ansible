---
- name: Check for local ansible group and configure it
  ansible.builtin.group:
    name: ansible
    state: present

- name: Check for local ansible user and configure it
  ansible.builtin.user:
    name: ansible
    group: ansible
    shell: /bin/bash
    home: /home/ansible
    create_home: true
    state: present

- name: Set authorized key for ansible
  ansible.posix.authorized_key:
    user: ansible
    state: present
    key: "{{ lookup('env', 'ANSIBLE_USER_PUBKEY') }}"

- name: "Ensure the ansible_user User is in the wheel group on RedHat"
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: wheel
    append: true
  when: ansible_os_family == "RedHat"

- name: Ensure "/etc/sudoers.d/" directory exists
  ansible.builtin.file:
    path: /etc/sudoers.d
    state: directory
    owner: root
    group: root
    mode: "0750"

- name: "Allow the ansible_user user to use sudo without password"
  ansible.builtin.copy:
    dest: "/etc/sudoers.d/{{ ansible_user }}"
    content: "# Allow passwordless sudo for ansible account\n{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL\n"
    owner: root
    group: root
    mode: "0440"
    validate: "/usr/sbin/visudo --check --file=%s"

- name: Uncomment includedir line in /etc/sudoers
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    regexp: '^#\s*includedir.*$'
    line: '@includedir /etc/sudoers.d'
    validate: "/usr/sbin/visudo --check --file=%s"

- name: Check for local bischi group and configure it
  ansible.builtin.group:
    name: bischi
    state: present

- name: Check for local bischi user and configure it
  ansible.builtin.user:
    name: bischi
    group: bischi
    shell: /bin/bash
    home: /home/bischi
    create_home: true
    state: present

- name: Set authorized key for bischi
  ansible.posix.authorized_key:
    user: bischi
    state: present
    key: "{{ lookup('env', 'BISCHI_USER_PUBKEY') }}"

- name: Set authorized key for root
  ansible.posix.authorized_key:
    user: root
    state: present
    key: "{{ lookup('env', 'ROOT_USER_PUBKEY') }}"
  when: inventory_hostname not in groups['hetzner']
    

- name: Installs standard tools
  ansible.builtin.apt:
    pkg:
      - bash-completion
      - htop
      - nano
      - dnsutils
      - zip
      - unzip
      - fail2ban
      - rsync
      - tmux
  when: ansible_os_family == "Debian"

- name: Enable EPEL Repository on CentOS machines
  ansible.builtin.dnf:
    name: epel-release
    state: latest
  when: ansible_os_family == "RedHat"
- name: Installs Standard Tools
  ansible.builtin.dnf:
    pkg:
      - dnf-utils
      - bash-completion
      - htop
      - nano
      - dnsutils
      - zip
      - unzip
      - fail2ban
      - rsync
      - tmux
  when: ansible_os_family == "RedHat"

- name: Remove unnecessary SSH config
  ansible.builtin.file:
    state: absent
    path: /etc/ssh/sshd_config.d/50-cloud-init.conf

- name: Add hardened SSH config RedHat Based
  ansible.builtin.copy:
    dest: /etc/ssh/sshd_config
    src: files/rocky_sshd_config
    owner: root
    group: root
    mode: "0600"
    validate: sshd -t -f %s
  notify: Reload sshd RedHat
  when:
    - ansible_os_family == "RedHat"
    - inventory_hostname not in groups['hetzner']

- name: Add hardened SSH config Debian Based
  ansible.builtin.copy:
    dest: /etc/ssh/sshd_config
    src: files/ubuntu_sshd_config
    owner: root
    group: root
    mode: "0600"
    validate: sshd -t -f %s
  notify: Reload sshd Ubuntu
  when:
    - ansible_os_family == "Debian"
    - inventory_hostname not in groups['hetzner']
